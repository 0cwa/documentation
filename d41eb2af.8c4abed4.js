/*! For license information please see d41eb2af.8c4abed4.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{297:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(1),i=n(9),r=(n(0),n(337)),o=n(340),l=(n(344),{last_modified_on:"2020-07-23",$schema:"/.meta/.schemas/guides.json",title:"Feedback - Kotlin on the server-side - the good, and the bad",description:"Feedback of using Kotlin on the server-side development after years of experience in Java",author_github:"https://github.com/pjeziorowski",tags:["type: engineering","technology: kotlin"],hide_pagination:!0}),s={categories:[{name:"engineering",title:"Engineering",description:"We share our engineering learning with all of you.",permalink:"/guides/engineering"}],coverLabel:"Feedback - Kotlin on the server-side - the good, and the bad",description:"Feedback of using Kotlin on the server-side development after years of experience in Java",permalink:"/guides/engineering/feedback-kotlin-on-the-server-side",readingTime:"9 min read",source:"@site/guides/engineering/feedback-kotlin-on-the-server-side.md",tags:[{label:"type: engineering",permalink:"/guides/tags/type-engineering"},{label:"technology: kotlin",permalink:"/guides/tags/technology-kotlin"}],title:"Feedback - Kotlin on the server-side - the good, and the bad",truncated:!1,prevItem:{title:"Deploy Spring Boot with PostgreSQL with Qovery",permalink:"/guides/tutorial/deploy-spring-boot-with-postgresql"},nextItem:{title:"GraphQL API with Hasura",permalink:"/guides/tutorial/graphql-api-with-hasura"}},c=[{value:"Background",id:"background",children:[]},{value:"My feedback",id:"my-feedback",children:[{value:"From Java to Kotlin",id:"from-java-to-kotlin",children:[]},{value:"Reading/Writing Kotlin code",id:"readingwriting-kotlin-code",children:[]},{value:"How did I ramp up on Kotlin?",id:"how-did-i-ramp-up-on-kotlin",children:[]},{value:"After a few months",id:"after-a-few-months",children:[]},{value:"Java-Kotlin interop",id:"java-kotlin-interop",children:[]}]},{value:"The good and the bad",id:"the-good-and-the-bad",children:[{value:"Why you should consider it",id:"why-you-should-consider-it",children:[]},{value:"The dark side",id:"the-dark-side",children:[]}]},{value:"Final thoughts",id:"final-thoughts",children:[]}],u={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"background"},"Background"),Object(r.b)("p",null,"I've used Java as my primary server-side programming language for years. Before I joined ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.qovery.com"}),"Qovery"),", I have worked on a cloud-native project at SAP, where Java was the default choice to bootstrap new microservices, besides it's known limitations and cumbersomeness."),Object(r.b)("p",null,"JVM ecosystem, decent performance, and stability make Java a common choice in enterprises. From a developer's point of view, all of these come with the cost of working with old language, lacking some of the essential features that newer languages provide (which Java tries to fix with the recent changes and more rapid, 6-month release cadence)."),Object(r.b)("p",null,"Convincing colleagues to consider a new language (like Kotlin) was impossible, especially after taking our negative experiences with Scala. That's the main reason why my experience with Kotlin before changing the job was limited to playing with it in micro side projects and reading articles."),Object(r.b)("p",null,"In April, I started working at Qovery, a container as a service platform where a considerable part of the backend code is in Kotlin. In this post, I'll describe the last months of my journey from Java to Koltin, my experiences and thoughts on this process, and Kotlin as a server-side programming language."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"From developer experience point of view, Kotlin is a significant improvement, especially if you jump from 'old' Java - Patryk J.")),Object(r.b)("h2",{id:"my-feedback"},"My feedback"),Object(r.b)("h3",{id:"from-java-to-kotlin"},"From Java to Kotlin"),Object(r.b)("p",null,"For me, a Java developer with basic knowledge of other languages (like JS, Go, and other popular programming languages) moving from Java to Kotlin was natural. It was more like a gradual transition/upgrade rather than jumping into something new. Most of the right parts from Kotlin that are missing in Java can be found in other programming languages. If you are not limited to just one language (Java), there will be little in Kotlin that will surprise you (for the people thinking the transition from Java to Kotlin is hard - I recommend trying to use Rust without reading ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://doc.rust-lang.org/book/"}),"the Rust Bible")," twice - you'll change your mind quickly.)."),Object(r.b)("h3",{id:"readingwriting-kotlin-code"},"Reading/Writing Kotlin code"),Object(r.b)("p",null,"Reading Kotlin code came without any efforts. If you can't guess what the 'new' syntax means, all you need to do is take a quick look at the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://kotlinlang.org/docs/reference/basic-syntax.html"}),"basic syntax page"),", and you are good to go. Writing idiomatic Kotlin code, however, is a bit trickier. After years of using Java, you may have habits that will lead you to write Java-like Kotlin code. Writing idiomatic code, at least in my case, requires more time spent with the language. I found ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://kotlinlang.org/docs/reference/idioms.html"}),"this")," document invaluable to speed up this process."),Object(r.b)("h3",{id:"how-did-i-ramp-up-on-kotlin"},"How did I ramp up on Kotlin?"),Object(r.b)("p",null,"Getting ready to use Kotlin did not require more than spending a few days to get used to the codebase I would later work with and slowly reading the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://kotlinlang.org/docs/reference/basic-types.html"}),"Kotlin documentation")," in the meantime. I believe this gives you all the basics you need to be productive with the language - proficiency and expertise will come with time."),Object(r.b)("h3",{id:"after-a-few-months"},"After a few months"),Object(r.b)("p",null,"After switching from Java to Kotlin, my first impressions were that I deal with a modern programming language. Pascal notation, type inference, extension functions, no semicolons, immutable collections, coroutines, channels, and more - this all added to a feeling of using a powerful, modern language (even though most of the concepts are quite old, borrowed from other languages, you can see similar trends in other new, modern programming languages)."),Object(r.b)("p",null,"Another thing that I could quickly notice is the improvement in code readability (in the majority of cases) and conciseness. The most striking, simple examples are, of course, data classes and null checks, which cost much more work (and lines of code) in Java."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Data Classes")," (Kotlin vs Java):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin",metastring:'title="Kotlin"',title:'"Kotlin"'}),"data class Person(var name: String, var surname: String, var id: String)\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java",metastring:'title="Java"',title:'"Java"'}),"public class Person {\n    private String name;\n    private String surname;\n    private String id;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getSurname() {\n        return surname;\n    }\n    public void setSurname(String surname) {\n        this.surname = surname;\n    }\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    @Override public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Person person = (Person) o;\n        if (name != null ? !name.equals(person.name) : person.name != null) return false;\n        if (surname != null ? !surname.equals(person.surname) : person.surname != null)\n            return false;\n        return id != null ? id.equals(person.id) : person.id == null;\n    }\n    @Override public int hashCode() {\n        int result = name != null ? name.hashCode() : 0;\n        result = 31 * result + (surname != null ? surname.hashCode() : 0);\n        result = 31 * result + (id != null ? id.hashCode() : 0);\n        return result;\n    }\n    @Override public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + ''' +\n                \", surname='\" + surname + ''' +\n                \", id='\" + id + ''' +\n                '}';\n    }\n}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Null checks")," (Kotlin vs Java):"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin",metastring:'title="Kotlin"',title:'"Kotlin"'}),"fun main() {\n    val outer = OuterClass(null)\n    print(outer.inner?.someValue ?: \u201cDEFAULT VALUE\u201d)\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java",metastring:'title="Java"',title:'"Java"'}),"public class Example {\n\n  public static void main(String[] args) {\n    OuterClass outer = new OuterClass(null);\n    if (outer.inner != null && outer.inner.someValue != null) {\n            System.out.println(outer.inner.someValue);\n    } else {\n        System.out.println(\u201cDEFAULT VALUE\u201d);\n    }\n  }\n\n}\n")),Object(r.b)("p",null,"After some time of working with the language, I noticed another thing - the null safety, in fact, does make the difference. It does not solve all the issues with NPEs, but it drastically reduces this problem. Most of the time, when I get NPE is during development when I intentionally cut corners due to my laziness. After the code is ready to go to production, it's improbable to throw an NPE."),Object(r.b)("h3",{id:"java-kotlin-interop"},"Java-Kotlin interop"),Object(r.b)("p",null,"Java-Kotlin interop is excellent. You can basically use anything you would use in plain Java. Sometimes you may fall into a pitfall, you need to take care of nulls (they may come from Java libraries, which are not null-safe) or may need to use a plugin to make a given framework work properly. Still, in general, it's very good interop between two languages. You can even copy-paste Java code, and IntelliJ will convert it to Kotlin on the fly - it works quite good; most often, it produces working code - from time to time, you may need to correct something manually."),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/feedback-kotlin-on-the-server-side/java2kotlin.gif",alt:"Java to Kotlin"})),Object(r.b)("p",null,"Automatic Java -> Kotlin code conversion"),Object(r.b)("h2",{id:"the-good-and-the-bad"},"The good and the bad"),Object(r.b)("h3",{id:"why-you-should-consider-it"},"Why you should consider it"),Object(r.b)("p",null,"The list of good things about Kotlin is very long. I'll name just a few that are my favorite, and those alone should justify at least considering using Kotlin for server-side programming on the JVM:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"null is a separate type - String (non-null) and String? (nullable String) are two different types in Kotlin. If you don't mess with the compiler, you are pretty much safe from null pointer exceptions. The less 500 InternalServerErrors due to NPE, the better!"),Object(r.b)("li",{parentName:"ul"},"Extension Functions - Kotlin allows you to add new functions to any type (e.g., to the String class). It's just syntactic sugar that replaces Java's static util functions, but it makes the code much more readable.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'fun String.myOwnStringFunction() = this.toUpperCase() + " | Made with Extension Function"\n\nfun main() {\n    print("HelloWorld!".myOwnStringFunction()) // OUTPUT: HELLOWORLD! | Made with Extension Function\n}\n')),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Functional programming support - default immutability in collections, value objects, higher-order functions, useful helper functions in the standard library - FP support in Kotlin is so much better than in Java"),Object(r.b)("li",{parentName:"ul"},"Type inference - most often, you don't need to provide the type of the variable - the compiler is smart enough to know. One could say it's the same in Java since Java 10, but Kotlin took it to the next level - it can infer method return type or class property type, which is not the case in Java.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-kotlin"}),'class Example {\n\n    fun functionReturningString() = "NO RETURN TYPE SPECIFIED"\n\n}\n')),Object(r.b)("h3",{id:"the-dark-side"},"The dark side"),Object(r.b)("p",null,"Moving all language specificities aside, the thing that disappoints me the most is IntelliJ's performance while working with Kotlin. Code completion, syntax highlighting, refactoring - I can always feel a slight delay while working with Kotlin. The problem is not existing while working with any other language (besides the performance, JetBrains IDE works excellent with the language)."),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Renaming method parameter in Kotlin (pay attention to how long the red frame around the variable name after renaming action lasts):")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/feedback-kotlin-on-the-server-side/kotlin.gif",alt:"Kotlin"})),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Renaming method parameter in Golang (renaming almost instant):")),Object(r.b)("p",{align:"center"},Object(r.b)("img",{src:"/img/feedback-kotlin-on-the-server-side/golang.gif",alt:"Golang"})),Object(r.b)("p",null,"There are a few language design choices that some people dislike and/or find disappointing. Lack of possibility to extend data classes, lack of Java-like static methods & fields, classes that are final by default (which is inconvenient while using certain frameworks) - this kind of things are bugging some people. For me, these are not critical and certainly do not outweigh all the pros that come with using Kotlin on the server. However, you should be aware that Kotlin, just like any other tool, is not perfect."),Object(r.b)("h2",{id:"final-thoughts"},"Final thoughts"),Object(r.b)("p",null,"From developer experience point of view, Kotlin is a significant improvement, especially if you jump from 'old' Java (by old I mean 8, which is still very common in big enterprises). By using Kotlin, you end up writing less code. The code is more readable and safer - which is critical in the backend, server-side applications. The transition from Java to Kotlin is very smooth - you can become productive very quickly and develop your expertise with time. You don't need to learn new frameworks, as the same frameworks and libraries you have used before with Java do work with Kotlin as well. If you want to improve your server applications on the JVM - you should definitely give Kotlin a try."),Object(r.b)(o.a,{to:"/guides/engineering/",mdxType:"Jump"},"Engineering"))}d.isMDXComponent=!0},336:function(e,t,n){var a;!function(){"use strict";var n={}.hasOwnProperty;function i(){for(var e=[],t=0;t<arguments.length;t++){var a=arguments[t];if(a){var r=typeof a;if("string"===r||"number"===r)e.push(a);else if(Array.isArray(a)&&a.length){var o=i.apply(null,a);o&&e.push(o)}else if("object"===r)for(var l in a)n.call(a,l)&&a[l]&&e.push(l)}}return e.join(" ")}e.exports?(i.default=i,e.exports=i):void 0===(a=function(){return i}.apply(t,[]))||(e.exports=a)}()},337:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return p}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),u=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l({},t,{},e)),n},d=function(e){var t=u(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},h=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=a,p=d["".concat(o,".").concat(h)]||d[h]||m[h]||r;return n?i.a.createElement(p,l({ref:t},c,{components:n})):i.a.createElement(p,l({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},338:function(e,t,n){"use strict";var a=n(1),i=n(0),r=n.n(i),o=n(39),l=n(341),s=n(19),c=n.n(s);t.a=function(e){var t,n=e.to,s=e.href,u=n||s,d=Object(l.a)(u),m=Object(i.useRef)(!1),h=c.a.canUseIntersectionObserver;return Object(i.useEffect)((function(){return!h&&d&&window.docusaurus.prefetch(u),function(){h&&t&&t.disconnect()}}),[u,h,d]),u&&d?r.a.createElement(o.b,Object(a.a)({},e,{onMouseEnter:function(){m.current||(window.docusaurus.preload(u),m.current=!0)},innerRef:function(e){var n,a;h&&e&&d&&(n=e,a=function(){window.docusaurus.prefetch(u)},(t=new window.IntersectionObserver((function(e){e.forEach((function(e){n===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(t.unobserve(n),t.disconnect(),a())}))}))).observe(n))},to:u})):r.a.createElement("a",Object(a.a)({},e,{href:u}))}},339:function(e,t,n){"use strict";n(343);var a=n(0),i=n.n(a),r=n(336),o=n.n(r);n(133);t.a=function(e){var t=e.children,n=e.classNames,a=e.fill,r=e.icon,l=e.type,s=null;switch(l){case"danger":s="alert-triangle";break;case"success":s="check-circle";break;case"warning":s="alert-triangle";break;default:s="info"}return i.a.createElement("div",{className:o()(n,"alert","alert--"+l,{"alert--fill":a,"alert--icon":!1!==r}),role:"alert"},!1!==r&&i.a.createElement("i",{className:o()("feather","icon-"+(r||s))}),t)}},340:function(e,t,n){"use strict";var a=n(0),i=n.n(a),r=n(338),o=n(336),l=n.n(o);n(132);t.a=function(e){var t=e.children,n=e.className,a=e.badge,o=e.leftIcon,s=e.rightIcon,c=e.size,u=e.target,d=e.to,m=l()("jump-to","jump-to--"+c,n),h=i.a.createElement("div",{className:"jump-to--inner"},i.a.createElement("div",{className:"jump-to--inner-2"},o&&i.a.createElement("div",{className:"jump-to--left"},i.a.createElement("i",{className:"feather icon-"+o})),i.a.createElement("div",{className:"jump-to--main"},a?i.a.createElement("span",{className:"badge badge--primary badge--right"},a):"",t),i.a.createElement("div",{className:"jump-to--right"},i.a.createElement("i",{className:"feather icon-"+(s||"chevron-right")+" arrow"}))));return u?i.a.createElement("a",{href:d,target:u,className:m},h):i.a.createElement(r.a,{to:d,className:m},h)}},341:function(e,t,n){"use strict";function a(e){return!1===/^(https?:|\/\/)/.test(e)}n.d(t,"a",(function(){return a}))},342:function(e,t,n){var a=n(25).f,i=Function.prototype,r=/^\s*function ([^ (]*)/;"name"in i||n(10)&&a(i,"name",{configurable:!0,get:function(){try{return(""+this).match(r)[1]}catch(e){return""}}})},343:function(e,t,n){var a=n(12);a(a.P,"Array",{fill:n(346)}),n(75)("fill")},344:function(e,t,n){"use strict";n(342);var a=n(0),i=n.n(a),r=n(339);t.a=function(e){var t=e.children,n=e.name;return i.a.createElement(r.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},i.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",n||"page"," assumes the following:"),t)}},346:function(e,t,n){"use strict";var a=n(27),i=n(76),r=n(26);e.exports=function(e){for(var t=a(this),n=r(t.length),o=arguments.length,l=i(o>1?arguments[1]:void 0,n),s=o>2?arguments[2]:void 0,c=void 0===s?n:i(s,n);c>l;)t[l++]=e;return t}}}]);