/*! For license information please see e4c51017.7b7a0e58.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{395:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return p}));var r=t(1),a=t(9),o=(t(0),t(424)),i=t(428),l=(t(430),{last_modified_on:"2021-11-03",$schema:"/.meta/.schemas/guides.json",title:"How we extended Helm lifecycle with Rust",description:"Helm has some limits, discover how we extended functionnalities with Rust",author_github:"https://github.com/deimosfr",tags:["type: engineering","technology: helm","language: rust"],hide_pagination:!0}),c={categories:[{name:"engineering",title:"Engineering",description:"We share our engineering learning with all of you.",permalink:"/guides/engineering"}],coverLabel:"How we extended Helm lifecycle with Rust",description:"Helm has some limits, discover how we extended functionnalities with Rust",permalink:"/guides/engineering/how_we_extended_helm_lifecycle_with_rust",readingTime:"7 min read",source:"@site/guides/engineering/how_we_extended_helm_lifecycle_with_rust.md",tags:[{label:"type: engineering",permalink:"/guides/tags/type-engineering"},{label:"technology: helm",permalink:"/guides/tags/technology-helm"},{label:"language: rust",permalink:"/guides/tags/language-rust"}],title:"How we extended Helm lifecycle with Rust",truncated:!1,prevItem:{title:"How to write a Dockerfile",permalink:"/guides/tutorial/how-to-write-a-dockerfile"},nextItem:{title:"Kubernetes - Network isolation with NetworkPolicy",permalink:"/guides/engineering/basic-network-isolation-in-kubernetes"}},s=[{value:"Terraform Helm provider based",id:"terraform-helm-provider-based",children:[]},{value:"Structure",id:"structure",children:[]},{value:"Trait",id:"trait",children:[]},{value:"Lifecycles",id:"lifecycles",children:[{value:"check_prerequisites",id:"check_prerequisites",children:[]},{value:"pre_exec",id:"pre_exec",children:[]},{value:"exec",id:"exec",children:[]},{value:"on_deploy_failure",id:"on_deploy_failure",children:[]},{value:"post_exec",id:"post_exec",children:[]},{value:"validate",id:"validate",children:[]},{value:"Example of usage",id:"example-of-usage",children:[]}]},{value:"Final word",id:"final-word",children:[]}],u={rightToc:s};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"At Qovery, we're using Rust for the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/Qovery/engine"}),"Qovery Engine"),", in charge of deploying Cloud-managed Kubernetes Clusters, databases, and customers' applications."),Object(o.b)("p",null,"In order to deploy containers on Kubernetes, we're using Helm as it provides a lot of exciting features like:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Automatic rollback on failure"),Object(o.b)("li",{parentName:"ul"},"Consistency across deployments (manages create/update/delete)"),Object(o.b)("li",{parentName:"ul"},"Deployment history with manual rollback feature"),Object(o.b)("li",{parentName:"ul"},"It's one of the most used standards to deploy on Kubernetes, so we easily find existing charts"),Object(o.b)("li",{parentName:"ul"},"Safe lock deployments (denying parallel deployments)"),Object(o.b)("li",{parentName:"ul"},"And much more")),Object(o.b)("p",null,"If you\u2019re familiar with Helm and use several Helm charts to deploy everything on your stack, you certainly already have felt about missing lifecycles. By default, ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://helm.sh/docs/topics/charts_hooks/"}),"Helm provides Hooks to manage lifecycles"),". This is excellent when you\u2019re the chart owner, as you can control it."),Object(o.b)("p",null,"But something is missing. How do you manage lifecycles when you\u2019re using a community chart? You have to fork the original Chart, add your hooks and maintain them over time (more or less depending on how customized your Hooks are). Quite boring, right?"),Object(o.b)("p",null,"Also, Hooks require a container to run your code as a job, so you have to create a container only for this purpose, store it on a registry, etc."),Object(o.b)("p",null,"Finally, how do you handle exceptions, fallbacks, ensure your app works as expected (in addition to Kubernetes lifecycles)? There are no common ways to do that with Helm."),Object(o.b)("p",null,"That\u2019s why we decided to build something on top of Helm directly in the Engine, to add a common lifecycle mechanism."),Object(o.b)("h2",{id:"terraform-helm-provider-based"},"Terraform Helm provider based"),Object(o.b)("p",null,"In another article, I was talking about ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://hub.qovery.com/guides/engineering/terraform-not-the-golden-hammer/"}),"why we removed Helm from Terraform"),". Even if the move was required, the way the Helm provider requested Chart configuration, was pretty good. So we decided to use something close to it with a struct."),Object(o.b)("p",null,"Here is how we declare a chart to be deployed:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'    let external_dns = CommonChart {\n        chart_info: ChartInfo {\n            name: "externaldns".to_string(),\n            path: chart_path("common/charts/external-dns"),\n            values_files: vec![chart_path("chart_values/external-dns.yaml")],\n            values: vec![\n                // resources limits\n                ChartSetValue {\n                    key: "resources.limits.cpu".to_string(),\n                    value: "50m".to_string(),\n                },\n                ChartSetValue {\n                    key: "resources.requests.cpu".to_string(),\n                    value: "50m".to_string(),\n                },\n                ChartSetValue {\n                    key: "resources.limits.memory".to_string(),\n                    value: "50Mi".to_string(),\n                },\n                ChartSetValue {\n                    key: "resources.requests.memory".to_string(),\n                    value: "50Mi".to_string(),\n                },\n            ],\n            ..Default::default()\n        },\n    };\n')),Object(o.b)("p",null,"Pretty simple for a basic Chart right?"),Object(o.b)("h2",{id:"structure"},"Structure"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[derive(Clone)]\npub enum HelmAction {\n    Deploy,\n    Destroy,\n    Skip,\n}\n\n#[derive(Copy, Clone)]\npub enum HelmChartNamespaces {\n    KubeSystem,\n    Prometheus,\n    Logging,\n    CertManager,\n    NginxIngress,\n    Qovery,\n}\n\npub struct ChartInfo {\n    pub name: String,\n    pub path: String,\n    pub namespace: HelmChartNamespaces,\n    pub action: HelmAction,\n    pub atomic: bool,\n    pub force_upgrade: bool,\n    pub last_breaking_version_requiring_restart: None,\n    pub timeout: String,\n    pub dry_run: bool,\n    pub wait: bool,\n    pub values: Vec<ChartSetValue>,\n    pub values_files: Vec<String>,\n    pub yaml_files_content: Vec<ChartValuesGenerated>,\n}\n")),Object(o.b)("p",null,"Compared to the Helm chart, you can note some differences, we support:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Direct YAML content in ",Object(o.b)("inlineCode",{parentName:"li"},"yaml_files_content"),", which is sometimes super convenient."),Object(o.b)("li",{parentName:"ul"},"last_breaking_version_requiring_restart: allowing us to uninstall a chart before installing it once again when some major breaking changes are required by community charts (and for sure there are no data associated)")),Object(o.b)("p",null,"We then decided to create defaults values as it\u2019s very frequent to have common ones:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'impl Default for ChartInfo {\n    fn default() -> ChartInfo {\n        ChartInfo {\n            name: "undefined".to_string(),\n            path: "undefined".to_string(),\n            namespace: KubeSystem,\n            action: Deploy,\n            atomic: true,\n            force_upgrade: false,\n            last_breaking_version_requiring_restart: None,\n            timeout: "180s".to_string(),\n            dry_run: false,\n            wait: true,\n            values: Vec::new(),\n            values_files: Vec::new(),\n            yaml_files_content: vec![],\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"trait"},"Trait"),Object(o.b)("p",null,"Here is starting the exciting part. We\u2019re using an interface (called trait in Rust):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'pub trait HelmChart: Send {\n\n    fn run(&self, kubernetes_config: &Path, envs: &[(String, String)]) -> Result<Option<ChartPayload>, SimpleError> {\n        info!("prepare and deploy chart {}", &self.get_chart_info().name);\n        let payload = self.check_prerequisites()?;\n        let payload = self.pre_exec(&kubernetes_config, &envs, payload)?;\n        let payload = match self.exec(&kubernetes_config, &envs, payload.clone()) {\n            Ok(payload) => payload,\n            Err(e) => {\n                error!(\n                    "Error while deploying chart: {:?}",\n                    e.message.clone().expect("no error message provided")\n                );\n                self.on_deploy_failure(&kubernetes_config, &envs, payload)?;\n                return Err(e);\n            }\n        };\n        let payload = self.post_exec(&kubernetes_config, &envs, payload)?;\n        let payload = self.validate(&kubernetes_config, &envs, payload)?;\n        Ok(payload)\n    }\n')),Object(o.b)("p",null,"As you can see there, there are several steps:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"check_prerequisites: ensuring everything is ok before doing any action"),Object(o.b)("li",{parentName:"ul"},"pre_exec: run pre exec code before running any action on a chart"),Object(o.b)("li",{parentName:"ul"},"exec: perform an action (deploy/delete) on a chart"),Object(o.b)("li",{parentName:"ul"},"on_deploy_failure: run code when an action failed"),Object(o.b)("li",{parentName:"ul"},"post_exec: run code after helm action"),Object(o.b)("li",{parentName:"ul"},"validate: ensure deployed applications are working as expected")),Object(o.b)("h2",{id:"lifecycles"},"Lifecycles"),Object(o.b)("p",null,"Let\u2019s dig into what those lifecycles contain."),Object(o.b)("h3",{id:"check_prerequisites"},"check_prerequisites"),Object(o.b)("p",null,"By defaut, we simply check the prerequisites, like the file permissions on helm values override files:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'    fn check_prerequisites(&self) -> Result<Option<ChartPayload>, SimpleError> {\n        let chart = self.get_chart_info();\n        for file in chart.values_files.iter() {\n            match fs::metadata(file) {\n                Ok(_) => {}\n                Err(e) => {\n                    return Err(SimpleError {\n                        kind: SimpleErrorKind::Other,\n                        message: Some(format!(\n                            "Can\'t access helm chart override file {} for chart {}. {:?}",\n                            file, chart.name, e\n                        )),\n                    })\n                }\n            }\n        }\n        Ok(None)\n    }\n')),Object(o.b)("h3",{id:"pre_exec"},"pre_exec"),Object(o.b)("p",null,"Pre exec is really useful for some charts, to pre-check/validate/update stuffs before going further. Super useful for example for already deployed applications without Helm, and you want to give ownership to Helm by updating annotations (like AWS CNI). by default, nothing is done:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"    fn pre_exec(\n        &self,\n        _kubernetes_config: &Path,\n        _envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        Ok(payload)\n    }\n")),Object(o.b)("h3",{id:"exec"},"exec"),Object(o.b)("p",null,"Exec is where we define the Chart action to perform Deploy/Destroy/Skip:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"    fn exec(\n        &self,\n        kubernetes_config: &Path,\n        envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        let environment_variables = envs.iter().map(|x| (x.0.as_str(), x.1.as_str())).collect();\n        match self.get_chart_info().action {\n            HelmAction::Deploy => {\n                helm_exec_upgrade_with_chart_info(kubernetes_config, &environment_variables, self.get_chart_info())?\n            }\n            HelmAction::Destroy => {\n                let chart_info = self.get_chart_info();\n                match is_chart_deployed(\n                    kubernetes_config,\n                    environment_variables.clone(),\n                    Some(get_chart_namespace(chart_info.namespace.clone()).as_str()),\n                    chart_info.name.clone(),\n                ) {\n                    Ok(deployed) => {\n                        if deployed {\n                            helm_exec_uninstall_with_chart_info(kubernetes_config, &environment_variables, chart_info)?\n                        }\n                    }\n                    Err(e) => return Err(e),\n                };\n            }\n            HelmAction::Skip => {}\n        }\n        Ok(payload)\n    }\n")),Object(o.b)("h3",{id:"on_deploy_failure"},"on_deploy_failure"),Object(o.b)("p",null,"On failure, by default we collect events in order to debug when something goes wrong:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"    fn on_deploy_failure(\n        &self,\n        kubernetes_config: &Path,\n        envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        // print events for future investigation\n        let environment_variables: Vec<(&str, &str)> = envs.iter().map(|x| (x.0.as_str(), x.1.as_str())).collect();\n        kube_get_events(\n            kubernetes_config,\n            get_chart_namespace(self.get_chart_info().namespace).as_str(),\n            environment_variables,\n        )?;\n        Ok(payload)\n    }\n")),Object(o.b)("h3",{id:"post_exec"},"post_exec"),Object(o.b)("p",null,"Run actions after a an exec (deploy/uninstall/skip):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"    fn post_exec(\n        &self,\n        _kubernetes_config: &Path,\n        _envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        Ok(payload)\n    }\n}\n")),Object(o.b)("h3",{id:"validate"},"validate"),Object(o.b)("p",null,"Ensure the chart has correctly deployed elements and we validate there the service is working as expected:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"    fn validate(\n        &self,\n        _kubernetes_config: &Path,\n        _envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        match chart_info.action {\n            HelmAction::Deploy => {},\n    _ = {},\n        };\n        Ok(payload)\n    }\n}\n")),Object(o.b)("p",null,"Obviously, this has to be adapted for any deployed solution."),Object(o.b)("h3",{id:"example-of-usage"},"Example of usage"),Object(o.b)("p",null,"Let\u2019s try with a real use case. Here it\u2019s the Prometheus Operator where we need to change the exec method to be able to manage lifecycle with CRDs (the uninstall phase):"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'#[derive(Default)]\npub struct PrometheusOperatorConfigChart {\n    pub chart_info: ChartInfo,\n}\n\nimpl HelmChart for PrometheusOperatorConfigChart {\n    fn get_chart_info(&self) -> &ChartInfo {\n        &self.chart_info\n    }\n\n    fn exec(\n        &self,\n        kubernetes_config: &Path,\n        envs: &[(String, String)],\n        payload: Option<ChartPayload>,\n    ) -> Result<Option<ChartPayload>, SimpleError> {\n        let environment_variables: Vec<(&str, &str)> = envs.iter().map(|x| (x.0.as_str(), x.1.as_str())).collect();\n        let chart_info = self.get_chart_info();\n        match chart_info.action {\n            HelmAction::Deploy => {\n                if let Err(e) = helm_destroy_chart_if_breaking_changes_version_detected(\n                    kubernetes_config,\n                    &environment_variables,\n                    chart_info,\n                ) {\n                    warn!(\n                        "error while trying to destroy chart if breaking change is detected: {:?}",\n                        e.message\n                    );\n                }\n\n                helm_exec_upgrade_with_chart_info(kubernetes_config, &environment_variables, chart_info)?\n            }\n            HelmAction::Destroy => {\n                let chart_info = self.get_chart_info();\n                match is_chart_deployed(\n                    kubernetes_config,\n                    environment_variables.clone(),\n                    Some(get_chart_namespace(chart_info.namespace.clone()).as_str()),\n                    chart_info.name.clone(),\n                ) {\n                    Ok(deployed) => {\n                        if deployed {\n                            let prometheus_crds = [\n                                "prometheuses.monitoring.coreos.com",\n                                "prometheusrules.monitoring.coreos.com",\n                                "servicemonitors.monitoring.coreos.com",\n                                "podmonitors.monitoring.coreos.com",\n                                "alertmanagers.monitoring.coreos.com",\n                                "thanosrulers.monitoring.coreos.com",\n                            ];\n                            helm_exec_uninstall_with_chart_info(kubernetes_config, &environment_variables, chart_info)?;\n                            for crd in &prometheus_crds {\n                                kubectl_exec_delete_crd(kubernetes_config, crd, environment_variables.clone())?;\n                            }\n                        }\n                    }\n                    Err(e) => return Err(e),\n                };\n            }\n            HelmAction::Skip => {}\n        }\n        Ok(payload)\n    }\n}\n')),Object(o.b)("h2",{id:"final-word"},"Final word"),Object(o.b)("p",null,"We\u2019ve been using this for production usage at Qovery for more than five months now. From an experienced Kubernetes point of view (+6y of XP on the Kubernetes ecosystem), I finally feel confident on helm chart deployments."),Object(o.b)("p",null,"We don\u2019t know if we will move out to a dedicated library. If we receive requests, we\u2019ll consider it."),Object(o.b)(i.a,{to:"/guides/engineering/",mdxType:"Jump"},"Engineering"))}p.isMDXComponent=!0},422:function(e,n,t){var r;!function(){"use strict";var t={}.hasOwnProperty;function a(){for(var e=[],n=0;n<arguments.length;n++){var r=arguments[n];if(r){var o=typeof r;if("string"===o||"number"===o)e.push(r);else if(Array.isArray(r)&&r.length){var i=a.apply(null,r);i&&e.push(i)}else if("object"===o)for(var l in r)t.call(r,l)&&r[l]&&e.push(l)}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0===(r=function(){return a}.apply(n,[]))||(e.exports=r)}()},423:function(e,n,t){"use strict";t(426);var r=t(0),a=t.n(r),o=t(422),i=t.n(o);t(131);n.a=function(e){var n=e.children,t=e.classNames,r=e.fill,o=e.icon,l=e.type,c=null;switch(l){case"danger":c="alert-triangle";break;case"success":c="check-circle";break;case"warning":c="alert-triangle";break;default:c="info"}return a.a.createElement("div",{className:i()(t,"alert","alert--"+l,{"alert--fill":r,"alert--icon":!1!==o}),role:"alert"},!1!==o&&a.a.createElement("i",{className:i()("feather","icon-"+(o||c))}),n)}},424:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),u=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l({},n,{},e)),t},p=function(e){var n=u(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=Object(r.forwardRef)((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return t?a.a.createElement(h,l({ref:n},s,{components:t})):a.a.createElement(h,l({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},425:function(e,n,t){"use strict";var r=t(1),a=t(0),o=t.n(a),i=t(39),l=t(429),c=t(19),s=t.n(c);n.a=function(e){var n,t=e.to,c=e.href,u=t||c,p=Object(l.a)(u),d=Object(a.useRef)(!1),m=s.a.canUseIntersectionObserver;return Object(a.useEffect)((function(){return!m&&p&&window.docusaurus.prefetch(u),function(){m&&n&&n.disconnect()}}),[u,m,p]),u&&p?o.a.createElement(i.b,Object(r.a)({},e,{onMouseEnter:function(){d.current||(window.docusaurus.preload(u),d.current=!0)},innerRef:function(e){var t,r;m&&e&&p&&(t=e,r=function(){window.docusaurus.prefetch(u)},(n=new window.IntersectionObserver((function(e){e.forEach((function(e){t===e.target&&(e.isIntersecting||e.intersectionRatio>0)&&(n.unobserve(t),n.disconnect(),r())}))}))).observe(t))},to:u})):o.a.createElement("a",Object(r.a)({},e,{href:u}))}},426:function(e,n,t){var r=t(12);r(r.P,"Array",{fill:t(431)}),t(74)("fill")},427:function(e,n,t){var r=t(25).f,a=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in a||t(10)&&r(a,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(e){return""}}})},428:function(e,n,t){"use strict";var r=t(0),a=t.n(r),o=t(425),i=t(422),l=t.n(i);t(132);n.a=function(e){var n=e.children,t=e.className,r=e.badge,i=e.leftIcon,c=e.rightIcon,s=e.size,u=e.target,p=e.to,d=l()("jump-to","jump-to--"+s,t),m=a.a.createElement("div",{className:"jump-to--inner"},a.a.createElement("div",{className:"jump-to--inner-2"},i&&a.a.createElement("div",{className:"jump-to--left"},a.a.createElement("i",{className:"feather icon-"+i})),a.a.createElement("div",{className:"jump-to--main"},r?a.a.createElement("span",{className:"badge badge--primary badge--right"},r):"",n),a.a.createElement("div",{className:"jump-to--right"},a.a.createElement("i",{className:"feather icon-"+(c||"chevron-right")+" arrow"}))));return u?a.a.createElement("a",{href:p,target:u,className:d},m):a.a.createElement(o.a,{to:p,className:d},m)}},429:function(e,n,t){"use strict";function r(e){return!1===/^(https?:|\/\/)/.test(e)}t.d(n,"a",(function(){return r}))},430:function(e,n,t){"use strict";t(427);var r=t(0),a=t.n(r),o=t(423);n.a=function(e){var n=e.children,t=e.name;return a.a.createElement(o.a,{type:"info",fill:!0,icon:!1,rounded:!0,className:"list--icons list--icons--arrow list--tight list--indent margin-bottom--lg"},a.a.createElement("p",{class:"text--lg margin-bottom--sm",style:{marginTop:"-0.25em"}},"Before you begin, this ",t||"page"," assumes the following:"),n)}},431:function(e,n,t){"use strict";var r=t(27),a=t(75),o=t(26);e.exports=function(e){for(var n=r(this),t=o(n.length),i=arguments.length,l=a(i>1?arguments[1]:void 0,t),c=i>2?arguments[2]:void 0,s=void 0===c?t:a(c,t);s>l;)n[l++]=e;return n}}}]);