import Assumptions from '@site/src/components/Assumptions';
import Alert from '@site/src/components/Alert';

This tutorial show you how to deploy your [<%= x %>][<%= x_url %>] application with [<%= y %>][<%= y_url %>] database. Let's go!

<Assumptions name="guide">

* Your Operating System is macOS / Windows / Linux
* You have a [Github][urls.github] or [Gitlab][urls.gitlab] account

</Assumptions>

## Steps to deploy <%= x %> with Qovery

<%= qovery_sign_up() %>

## Deployment

### <%= x %> sample application
Get a local copy of the [<%= x %> sample project][<%= x_sample_application_url %>] by forking it.

### Configure your project
To deploy your <%= x %> application connected to a <%= y %>, you need to have a `.qovery.yml` file, and a `Dockerfile` (both provided in the sample project) at the root of your project.

<Alert>
The .qovery.yml file describes all the dependencies that your application needs (e.g., <%= y %>) to work smoothly
</Alert>

In this example we are using <%= y %> v<%= y_version %>

After forking the sample application, you can check the content of `.qovery.yml`:

```bash
$ cat .qovery.yml
```

```yaml title=".qovery.yml"
application:
  name: my-application
  project: my-project
  publicly_accessible: true
databases:
- type: <%= y.downcase %>
  version: "<%= y_version %>"
  name: my-db
routers:
- name: main
  routes:
  - application_name: my-application
    paths:
    - /
```

[Authorize the Qovery Github application][urls.authorize_qovery] to get access to your Github account. Once done, all new commits you push to your forked repository will trigger new deployments of the application.

### Connect <%= x %> to <%= y %>
Credentials of your database are available via environment variables. Qovery injects environment vars at the runtime.
To list all the environment variables available to your application, execute

```bash
# List all environment variables
$ qovery project env list
```

```bash title="Output"
SCOPE    | KEY                                                      | VALUE
BUILT_IN | QOVERY_JSON_B64                                          | <base64>
BUILT_IN | QOVERY_BRANCH_NAME                                       | master
BUILT_IN | QOVERY_IS_PRODUCTION                                     | true
BUILT_IN | QOVERY_MY_APPLICATION_HOSTNAME                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_DATABASE                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_PASSWORD                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_USERNAME                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_PORT                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_FQDN                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_HOST                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_CONNECTION_URI_WITHOUT_CREDENTIALS | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_CONNECTION_URI                     | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_VERSION                            | <%= y_version %>
BUILT_IN | QOVERY_DATABASE_MY_DB_TYPE                               | <%= y %>
BUILT_IN | QOVERY_DATABASE_MY_DB_NAME                               | my-db
```

The sample application is preconfigured to use those environment variables to connect to the database.

Forking the application with `.qovery.yml` and a `Dockerfile` should trigger app deployment.

See the deployment status by executing:

```bash
# Show your deployment status
$ qovery status
```

```bash title="Output"
BRANCH NAME | STATUS  | ENDPOINTS                                   | APPLICATIONS    | DATABASES
master      | running | https://main-abcdefgh12345678-gtw.qovery.io | my-application  | my-db

APPLICATION NAME  | STATUS  | DATABASES
my-application    | running | my-db

DATABASE NAME    | STATUS  | TYPE       | VERSION | ENDPOINT | PORT     | USERNAME | PASSWORD | APPLICATIONS
my-db            | running | <%= y.upcase %>      | <%= y_version %>     | <hidden> | <hidden> | <hidden> | <hidden> | my-application
```

When your application `status` is `running`, you can use a browser or `curl` to access its endpoints.

## Trigger a new deployment

Now, you can play with the sample application and commit & push your changes. Qovery detects your actions and triggers new builds and application deployments. Any change you make will be reflected in your deployed application automatically.

## Bonuses (optional)
### Deploy the application on dev environments
Qovery has a compelling feature known as "[environments][docs.main-concepts.environment]". Qovery supports the deployment of isolated development environments that reflect your Git branches. Environments are complete copies of all of your data, application, and services like databases. The Environment is useful for testing changes in isolation before merging them to your main branch.

So, do you want to create a new feature, fix a bug, or make modifications without impacting the production or any other important environment? Type the following commands:

```bash
$ git checkout -b feat_foo
$ git push -u origin feat_foo

# show deployment status
$ qovery status
```

```bash title="Output"
BRANCH NAME | STATUS  | ENDPOINTS                                   | APPLICATIONS    | DATABASES
feat_foo    | running | https://main-yenr7erjbs87dk4m-gtw.qovery.io | my-application  | my-db

APPLICATION NAME      | STATUS  | DATABASES
docker-simple-example | running | my-db

DATABASE NAME  | STATUS  | TYPE       | VERSION | ENDPOINT | PORT     | USERNAME | PASSWORD | APPLICATIONS
my-db          | running | <%= y %>      | <%= y_version %>     | <hidden> | <hidden> | <hidden> | <hidden> | my-application
```

<Jump to="/guides/advanced/using-multiple-environments">Multiple Environments</Jump>

### Test the <%= x %> application locally
The Qovery motto is: if your application runs locally, it runs well on Qovery, too. To test if your application is running locally, execute the following command:

<Alert>
The Docker runtime is required
</Alert>

```bash
$ qovery run
```

Note: `qovery run` connects your application to the <%= y %> database on Qovery.


## Conclusion
Congratulations! Now, you know how to deploy your <%= x %> app with <%= y %> in just a few steps.

Do you have any feedback about this tutorial? Let us know what you think on [Discord][urls.qovery_chat], and join our wonderful dev community of +600 devs.

