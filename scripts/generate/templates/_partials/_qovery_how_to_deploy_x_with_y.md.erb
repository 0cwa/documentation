import Assumptions from '@site/src/components/Assumptions';
import Alert from '@site/src/components/Alert';

[AWS][urls.aws] (Amazon Web Services) is a fantastic and reliable cloud service provider. AWS, like [GCP][urls.gcp] (Google Cloud Platform) and Microsoft [Azure][urls.azure], provides everything you need to host an application without having to worry about running the underlying servers and network configuration.

However, deploying an application on any of these Cloud provider presents some challenges. The typical deployment workflow looks like this: write code, push it to Git, compile code, deploy code, validate your changes, and repeat. Developers thus not only have to do all of this manually, but they also have to configure tons of services (VPC, database, cache, DNS, CDN, etc.) to make their application live on the web.

Qovery solves this problem by combining the reliability of AWS, and the simplicity of Heroku to augment the developer experience.

In this blog post, I will show you how Qovery improves the developer experience to deploy staging and production [<%= x %>][<%= x_url %>] application with [<%= y %>][<%= y_url %>] database on Qovery. You will be able to focus on writing the best code instead of managing complex services.

<Assumptions name="guide">

* Your Operating System is MacOS / Windows / Linux
* You have a [Github][urls.github] account

</Assumptions>

## Qovery

<%= qovery_sign_up() %>

## Deployment

### <%= x %> sample application (Optional)
Get a local copy of the [<%= x %> sample project][<%= x_sample_application_url %>] by forking the project.

### Configure your project
To deploy your <%= x %> application connected to a <%= y %> database, you need to have a `.qovery.yml` file, and a `Dockerfile` (provided in the sample project) at the root of your project.

<Alert>
The .qovery.yml file indicates all the dependencies that your application needs (e.g., <%= y %>) to work smoothly
</Alert>

Here we will use <%= y %> v<%= y_version %>

To create the `.qovery.yml` file, run the following command:‍‍

```bash
# Interactive command to generate the .qovery.yml
$ qovery init
```

Which creates the `.qovery.yml` file at the root of your project directory

```bash
$ cat .qovery.yml
```

```yaml title=".qovery.yml"
application:
  name: my-application
  project: my-project
  cloud_region: aws/us-west-2
  publicly_accessible: true
databases:
- type: <%= y.downcase %>
  version: "<%= y_version %>"
  name: my-db
routers:
- name: main
  routes:
  - application_name: my-application
    paths:
    - /
```

[Authorize the Qovery Github application][urls.authorize_qovery] to get access to your Github account. Once done, you need to commit and push the `.qovery.yml` and `Dockerfile` file to deploy your app.

### Connect your application to <%= y %>
Credentials of your database are available through environment variables. Qovery injects environment variables at the runtime.
To list all the environment variables available for your application, execute

```bash
# List all environment variables
$ qovery project env list
```

```bash title="Output"
SCOPE    | KEY                                                      | VALUE
BUILT_IN | QOVERY_JSON_B64                                          | <base64>
BUILT_IN | QOVERY_BRANCH_NAME                                       | master
BUILT_IN | QOVERY_IS_PRODUCTION                                     | true
BUILT_IN | QOVERY_MY_APPLICATION_HOSTNAME                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_DATABASE                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_PASSWORD                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_USERNAME                           | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_PORT                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_FQDN                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_HOST                               | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_CONNECTION_URI_WITHOUT_CREDENTIALS | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_CONNECTION_URI                     | <hidden>
BUILT_IN | QOVERY_DATABASE_MY_DB_VERSION                            | <%= y_version %>
BUILT_IN | QOVERY_DATABASE_MY_DB_TYPE                               | <%= y %>
BUILT_IN | QOVERY_DATABASE_MY_DB_NAME                               | my-db
```

### Deploy your application
Congratulations, you are finally ready to deploy your application. Now, execute the following commands:

```bash
$ git add .qovery.yml Dockerfile
$ git commit -m “add .qovery.yml and Dockerfile”
$ git push -u origin qovery
```

Voila! Qovery is now deploying your app!

See the deployment status by executing

```bash
# Show your deployment status
$ qovery status
```

```bash title="Output"
BRANCH NAME | STATUS  | ENDPOINTS                                   | APPLICATIONS    | DATABASES
master      | running | https://main-abcdefgh12345678-gtw.qovery.io | my-application  | my-db

APPLICATION NAME  | STATUS  | DATABASES
my-application    | running | my-db

DATABASE NAME    | STATUS  | TYPE       | VERSION | ENDPOINT | PORT     | USERNAME | PASSWORD | APPLICATIONS
my-db            | running | <%= y.upcase %>      | <%= y_version %>     | <hidden> | <hidden> | <hidden> | <hidden> | my-application
```

## Bonuses (optional)
### Test the <%= x %> application locally
The Qovery motto is: if your application runs locally, then your application will run on Qovery. To test if your application is running locally, execute the following command:

<Alert>
The Docker runtime is required
</Alert>

```bash
$ qovery run
```

Note: `qovery run` connects your application to the <%= y %> database on Qovery.

### Deploy the application on a staging environment
Qovery has a compelling feature known as “environment”. Qovery supports the deployment of isolated development environments from your branches, complete with exact copies of all of your data. The Environment is useful for testing changes in isolation before merging them.

So, do you want to create a new feature, fix a bug, or make modifications without impacting the production or any other important environment? Type the following commands:

```bash
$ git checkout -b feat_foo
$ git push -u origin feat_foo

# show deployment status
$ qovery status
```

```bash title="Output"
BRANCH NAME | STATUS  | ENDPOINTS                                   | APPLICATIONS    | DATABASES
feat_foo    | running | https://main-yenr7erjbs87dk4m-gtw.qovery.io | my-application  | my-db

APPLICATION NAME              | STATUS  | DATABASES
docker-simple-example-laravel | running | my-db

DATABASE NAME  | STATUS  | TYPE       | VERSION | ENDPOINT | PORT     | USERNAME | PASSWORD | APPLICATIONS
my-db          | running | <%= y %>      | <%= y_version %>     | <hidden> | <hidden> | <hidden> | <hidden> | my-application
```

<Jump to="/guides/advanced/using-multiple-environments">Multiple Environments</Jump>

## Conclusion
Qovery bring to developers, the full power of simplicity and flexibility while deploying applications. Any developer can now take advantage of the most popular Cloud providers in seconds instead of days.

Accelerate your development and start using Qovery today. Let us know what you think about it on [Twitter][urls.qovery_twitter], or by [Discord][urls.qovery_chat].


