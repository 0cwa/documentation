---
title: Process Management
description: "How to manage the Qovery process, such as starting, stopping, and reloading."
---

This document covers how to manage the Qovery process using various interfaces.
How you manage the Qovery process is largely dependent on how you installed
Qovery.

## Starting

### Command

<%= interfaces_start(metadata.installation.interfaces_list) %>

### Flags

| Flag                    | Description                                                                                                         |    |
|:------------------------|:--------------------------------------------------------------------------------------------------------------------|:---|
| **Required**            |                                                                                                                     |    |
| `-c, --config <path>`   | Path the Qovery [configuration file][docs.configuration].                                                           |    |
| **Optional**            |                                                                                                                     |    |
| `-d, --dry-run`         | Qovery will [validate configuration][docs.validating] and exit.                                                     |    |
| `-q, --quiet`           | Raises the log level to `warn`.                                                                                     |    |
| `-qq`                   | Raises the log level to `error`.                                                                                    |    |
| `-qqq`                  | Turns logging off.                                                                                                  |    |
| `-r, --require-healthy` | Causes qovery to immediately exit if any sinks fail their healthchecks.                                             |    |
| `-t, --threads`         | Limits the number of internal threads Qovery can spawn.                                                             |    |
| `-v, --verbose`         | Drops the log level to `debug`.                                                                                     |    |
| `-vv`                   | Drops the log level to `trace`, the lowest level possible.                                                          |    |
| `-w, --watch-config`    | Qovery will watch for changes in [configuration file][docs.configuration], and reload accordingly. (Mac/Linux only) |    |

### Daemonizing

Qovery does not _directly_ offer a way to daemonize the Qovery process. We
highly recommend that you use a utility like [Systemd][urls.systemd] to
daemonize and manage your processes. Qovery provides a
[`qovery.service` file][urls.qovery_systemd_file] for Systemd.

## Stopping

The Qovery process can be stopped by sending it a `SIGTERM` process signal:

### Command

<%= interfaces_stop(metadata.installation.interfaces_list) %>

### Graceful Shutdown

Qovery is designed to gracefully shutdown within 20 seconds when a `SIGTERM`
process signal is received. The shutdown process is as follows:

1. Stop accepting new data for all [sources][docs.sources].
2. Gracefully close any open connections with a 20 second timeout.
3. Flush any sink buffers with a 20 second timeout.
4. Exit the process with a 1 code.

### Force Killing

If Qovery is forcefully killed there is potential for losing any in-flight
data. To mitigate this we recommend enabling on-disk buffers and avoiding
forceful shutdowns whenever possible.

### Exit Codes

If Qovery fails to start it will exit with one of the preferred exit codes
as defined by `sysexits.h`. A full list of exit codes can be found in the
[`exitcodes` Rust crate][urls.exit_codes]. The relevant codes that Qovery uses
are:

| Code | Description |
|:-----|:------------|
| `0`  | No error. |
| `78` | Bad [configuration][docs.configuration]. |

## Reloading

Qovery can be reloaded, on the fly, to recognize any configuration changes by
sending the Qovery process a `SIGHUP` signal.

### Command

<%= interfaces_stop(metadata.installation.interfaces_list) %>

### Automatic Reload On Changes

You can automatically reload Qovery's configuration file when it changes via
the `-w` or `--watch-config` flag upon [starting](#starting). This is
particularly helpful in scenarios where configuration is managed for you, such
as Kubernetes.

### Configuration Errors

When Qovery is reloaded it proceeds to read the new configuration file from
disk. If the file has errors it will be logged to `STDOUT` and ignored,
preserving any previous configuration that was set. If the process exits you
will not be able to restart the process since it will proceed to use the
new configuration file.

### Graceful Pipeline Transitioning

Qovery will perform a diff between the new and old configuration, determining
which sinks and sources should be started and shutdown and ensures the
transition from the old to new pipeline is graceful.
