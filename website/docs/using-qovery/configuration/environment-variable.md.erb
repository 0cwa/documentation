---
title: "Environment Variable"
description: "Learn how to configure Environment Variables on Qovery"
---
<Alert type="info">

Do you need to keep secure your environment variable? Use [Secret][docs.using-qovery.configuration.secret] instead of *Environment Variable*.

</Alert>

Qovery makes **Environment Variables** available to your services at runtime, as well as during builds and deploys.

<Alert type="warning">

Environment Variables are not directly connected to [Environment][docs.using-qovery.configuration.environment] concept.
- **Environment Variables**: represent variables you can store and retrieve in your applications.
- **Environments**: represent environments with services (apps, databases, and other services).

</Alert>

Here is a short video to show how to use environment variables.

<div class="video-container">
  <p align="center">
    <iframe src="https://www.loom.com/embed/4a8000605cd842519a32eb96feecda61" width="100%" height="100%" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen>
    </iframe>
  </p>
</div>

## Levels

There are four levels of Environment Variables. Each type differs in scope - you can create variables bound to application, environment, or project.

| Scope       | Level     | Description     |
|-------------|-----------|-----------------|
| **BUILT_IN**    | 1 | Automatically generated variables based on your configuration (e.g., requested databases) propagated to all projects, environments, and applications|
| **PROJECT**     | 2 | Variables at the project level are shared across all environments and all applications of the project|
| **ENVIRONMENT** | 3 | Variables at the environment level are shared across all applications of the project in one, given environment |
| **APPLICATION** | 4 | Variables available for one application in one environment |

## Built-in variables
By default, every environment contains built-in variables:

| Name       | Example     | Description     |
|-------------|-----------|-----------------|
| **QOVERY_BRANCH_NAME**     | master | Git branch name |
| **QOVERY_IS_PRODUCTION** | true | Flag that indicates production environment |

## Additional built-in variables

For any added service (database, broker, storage), your application receives additional built-in variables. These can be used, for example, to connect
to the database.

**Naming Convention**:

We use the following naming convention for additional built-in variables:

```
QOVERY_<SERVICE_TYPE>_<NAME>_<SPEC>
```

## Additional Rules

* Environment variable keys should use only alphanumeric characters and the underscore character (_) to ensure they are accessible from all programming languages. Environment variable keys should not include the hyphen character.
* Environment variable keys should not begin with a double underscore (__).
* An environment variableâ€™s key should not begin with QOVERY_ unless it is set by the Qovery platform itself.

## Create an Environment Variable

<Alert type="info">

Do you want to bulk import your Environment Variables? [Check out this tutorial][guides.tutorial.import-your-environment-variables-with-the-qovery-cli]

</Alert>

<Steps headingDepth={3}>
<ol>
<li>

Navigate to [Console][urls.qovery_console]

</li>
<li>

Select your project, environment and application

</li>
<li>

Select `Environment Variables` tab in the left panel and click `Create` button:

<p align="center">
  <img src="/img/configuration/variables/var-1.png" alt="Variables" />
</p>

</li>
<li>

Select the name and value of your new environment variable

<p align="center">
  <img src="/img/configuration/variables/var-2.png" alt="Variables" />
</p>

### Scopes

<Alert type="info">

Qovery provides three scopes of environment variables:
- Project
- Environment
- Application

<br/>

Additionally, there is one more `BUILT_IN` scope that is used for variables injected automatically by Qovery.


**Project** environment variables are visible in the whole project.

**Environment** environment variables are visible for all apps inside one environment.

**Application** environment variables are visible only in one application.

**BUILT_IN** variables are automatically injected to selected applications by Qovery.

[Read more in Levels section][docs.configuration.environment-variable#levels]

</Alert>

</li>
</ol>
</Steps>

## Delete an Environment Variable

<Steps headingDepth={3}>
<ol>
<li>

Navigate to [Console][urls.qovery_console]

</li>
<li>

Select your project, environment and application

</li>
<li>

Select the `Environment Variables` tab in the left panel

<p align="center">
  <img src="/img/configuration/variables/secret-2.png" alt="Variables" />
</p>

</li>
<li>

Select variable you want to delete and click the `Delete` button:

<p align="center">
  <img src="/img/configuration/variables/var-3.png" alt="Delete Variables" />
</p>

</li>
</ol>
</Steps>

## Update an Environment Variable

<Steps headingDepth={3}>
<ol>
<li>

Navigate to [Console][urls.qovery_console]

</li>
<li>

Select your project, environment and application

</li>
<li>

Select the `Environment Variables` tab in the left panel

<p align="center">
  <img src="/img/configuration/variables/secret-2.png" alt="Variables" />
</p>

</li>
<li>

Select variable you want to update and click the `Edit` button:

<p align="center">
  <img src="/img/configuration/variables/var-4.png" alt="Update Variables" />
</p>

</li>
<li>

Update the variable in the popup window:

<p align="center">
  <img src="/img/configuration/variables/var-5.png" alt="Update Variables" />
</p>

</li>
</ol>
</Steps>

## Override Environment Variable

If you want to override a value of an environment variable, follow those steps:

<Steps headingDepth={3}>
<ol>
<li>

Navigate to [Console][urls.qovery_console]

</li>
<li>

Select your project, environment and application

</li>
<li>

Select the `Environment Variables` tab in the left panel

<p align="center">
  <img src="/img/configuration/variables/secret-2.png" alt="Variables" />
</p>

</li>
<li>

Select variable you want to override and click the `Override` button:

<p align="center">
  <img src="/img/configuration/variables/var-6.png" alt="Override Variables" />
</p>

</li>
<li>

Override the variable in the popup window:

<p align="center">
  <img src="/img/configuration/variables/var-7.png" alt="Override Variables" />
</p>

</li>
</ol>
</Steps>

<Alert type="warning">

You can only override environment variables of a higher scope, e.g. **Environment** scope variable can override **Project** variable, but can't override **Application** variable.

</Alert>

## Alias Environment Variable

You can create an alias for the existing environment variable.

Let's suppose that your application requires a `DATABASE_URL` variable. Qovery provides your application with the `QOVERY_DATABASE_MY_POSTGRESQL_3498225_URL` variable with a database password.
Instead of copy-pasting its value, you can create an alias to `QOVERY_DATABASE_MY_POSTGRESQL_3498225_URL`.

<Steps headingDepth={3}>
<ol>
<li>

Navigate to [Console][urls.qovery_console]

</li>
<li>

Select your project, environment and application

</li>
<li>

Select the `Environment Variables` tab in the left panel

<p align="center">
  <img src="/img/configuration/variables/secret-2.png" alt="Variables" />
</p>

</li>
<li>

Select variable you want to alias and click the `Alias` button:

<p align="center">
  <img src="/img/configuration/variables/var-8.png" alt="ALias Variables" />
</p>

</li>
<li>

Alias the variable in the popup window:

<p align="center">
  <img src="/img/configuration/variables/var-9.png" alt="Alias Variables" />
</p>

</li>
</ol>
</Steps>

## Import environment variables

You can add a set of environment variables into Qovery by importing an `.env` file.  The `.env` file contains a list of your environment variables, in a `MY_KEY = VALUE` format.

To import environment variables into your Qovery environment, follow the steps below.

<Steps headingDepth={3}>
<ol>
<li>

On an application page, click on the `Environment variable` tabs > `Import` button.

<p align="center">
  <img src="/img/configuration/variables/import-button.png" alt="Import button" />
</p>

</li>
<li>

Drag & Drop the `.env` file into the modal, or click on the interface to open the file explorer.

<p align="center">
  <img src="/img/configuration/variables/import-load.png" alt="Loading interface" />
</p>

</li>
<li>

The file is loaded and a new modal is displayed, where you can configure the import of your variables.

<p align="center">
  <img src="/img/configuration/variables/import-file-loaded.png" alt="Import configuration" />
</p>

**Overwrites variables**

When this option is enabled, if an existing variable and an imported variable share the same name, the existing value will be overwritten by the imported one. 
If the option is disabled, the imported value will be ignored. 
However, to avoid conflicts in the architecture of your environment variables, some of them will intentionally not be imported.
To understand how we handle conflicts, please take a look to the [Importation conflicts](#importation-conflicts) section.

**Configure variables import**

On this modal, you can define for each variable the following parameters:

- **name**: upate variable name
- **Value**: update variable value
- **Scope**: Specify the scope in which you want to import the variable
- **Secret**: Specify if this value is considered as a secret or not

**Preset variables**

To help you import a large number of variables quickly, you can predefine scope and secret settings.
This will change the scope and secret value of all listed variables.
If the secret and scope of one or more specific variables are subsequently updated, this will not change the predefined setting.

</li>
<li>

When you have finished the configuration, click on the `Import` button.

</li>
<li>

A pop-up message is displayed to inform you that your environment variables have been imported. 

<p align="center">
  <img src="/img/configuration/variables/import-done.png" alt="Import button" />
</p>

</li>
</ol>
</Steps>

### Importation conflicts

To avoid conflicts between already existing and imported environment variables, some of them will not be imported, even if the overwrite option is activated. 
The different cases are described below. 

#### Imported variable has same name as BUILT_IN variable 

| Type       | Name            | Value     | Scope       |
|------------|-----------------|-----------|-------------|
| ** Existing variables **     |           |             |
| VALUE      | MY_VAR          | 42        | Built_in    |
| ** Variables to import **    |           |             |
| VALUE      | MY_VAR          | 10        | Application |

Built_in environment variables are generated and managed by Qovery and will not be overwritten, even if the `overwriting` option is activated.

#### Imported variable has same name as an existing ALIAS 

| Type       | Name            | Value     | Scope       |
|------------|-----------------|-----------|-------------|
| ** Existing variables **     |           |             |
| VALUE      | MY_VAR          | 42        | Environment |
| ALIAS      | MY_VAR_ALIAS    | MY_VAR    | Application |
| ** Variables to import **    |           |             |
| VALUE      | MY_VAR_ALIAS    | 10        | Application |

The value cannot be rewritten because the link between the original variable and the alias would be lost. 

#### Imported variable has same name as an existing secret (or vice versa)

| Type       | Name            | Value     | Scope       | Secret     |
|------------|-----------------|-----------|-------------|------------|
| ** Existing variables **     |           |             |            |
| VALUE      | MY_VAR          | 1         | Application | Ye         |
| ** Variables to import **    |           |             |            |
| VALUE      | MY_VAR          | 2         | Application | No         |

The value cannot be imported because this will overwrite the existing secret.

### Overwriting and limitations

Some overwriting cases are not supported for now. They are summarized in the following table. 

| Existing variable scope      | Imported variable scope               | Supported  |
|------------------------------|---------------------------------------|------------|
| PROJECT                      | PROJECT / ENVIRONMENT / APPLICATION   | YES        |
| ENVIRONMENT                  | PROJECT                               | NO         |
| ENVIRONMENT                  | ENVIRONMENT / APPLICATION             | YES        |
| APPLICATION                  | PROJECT / ENVIRONMENT                 | NO         |
| APPLICATION                  | APPLICATION                           | YES        |
