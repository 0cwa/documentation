---
title: "Environment Variable"
description: "Learn how to configure Environment Variables on Qovery"
---
<Alert type="info">

Do you need to keep secure your environment variable? Use [Secret][docs.using-qovery.configuration.secret] instead of *Environment Variable*.

</Alert>

Qovery makes **Environment Variables** available to all services at runtime, as well as during builds and deploys.

<Alert type="warning">

Environment Variables are not directly connected to [Environment][docs.using-qovery.configuration.environment] concept.
- **Environment Variables**: represent variables you can store and retrieve in your applications.
- **Environments**: represent environments with services (apps, databases, and other services).

</Alert>

## Create an Environment Variable

TODO

## Delete an Environment Variable

TODO

## Update an Environment Variable

TODO

## Levels

There are four levels of Environment Variables. Each type differs in scope - you can create variables bound to application, environment, or project.

| Scope       | Level     | Description     |
|-------------|-----------|-----------------|
| **BUILT_IN**    | 1 | Automatically generated variables based on your configuration (e.g., requested databases) propagated to all projects, environments, and applications|
| **PROJECT**     | 2 | Variables at the project level are shared across all environments and all applications of the project|
| **ENVIRONMENT** | 3 | Variables at the environment level are shared across all applications of the project in one, given environment |
| **APPLICATION** | 4 | Variables available for one application in one environment |

<Alert>

You can override variables - the highest level variable win (e.g., `PROJECT` variable can override `BUILT_IN` variable).

</Alert>

## Built-in variables
By default, every environment contains built-in variables:

| Name       | Example     | Description     |
|-------------|-----------|-----------------|
| **QOVERY_BRANCH_NAME**     | master | Git branch name |
| **QOVERY_IS_PRODUCTION** | true | Flag that indicates production environment |

<Alert>

You can not delete `BUILT_IN` variables, but you can override them!

</Alert>

## Additional built-in variables

For any added service (database, broker, storage), your application receives additional built-in variables. These can be used, for example, to connect
to the database.

**Naming Convention**:

We use the following naming convention for additional built-in variables:

```
QOVERY_<SERVICE_TYPE>_<NAME>_<SPEC>
```

## Override variable

As described in the levels' section, you can override existing variables. To do so, add a new Environment Variables with a higher level (e.g., add an `APPLICATION` level variable to override `PROJECT` variable for a given application).

> TODO screenshot override variable

## Alias
You can create an alias for the existing environment variable.

Let's suppose that your application requires a `DATABASE_URL` variable. Qovery provides your application with `QOVERY_DATABASE_MY_POSTGRESQL_3498225_URL` variable with a database password.
Instead of copy-pasting its value, you can create an alias to `QOVERY_DATABASE_MY_POSTGRESQL_3498225_URL`.

> TODO screenshot alias

## .env file (dot env file)

When running your application, you will typically use a set of environment variables to capture the configuration of the application. For example: say your app uses a logger to debug what's going on. You would want to put your logger in debug mode.

The `.env` file lets you capture all the environment variables that you need in order to run your application locally. When you start your application using `qovery run`, the `.env` file is read, and each name/value pair is inserted into the environment, to mimic the action of environment variables.

### View you application's environment variables

To view all of your application’s environment variables, type `qovery application env list`.

### Look at the contents of your .env file

```bash
$ cat .env
```

Here's an example `.env` file:

```bash
LOGGER=debug
MY_VAR_2=myValue2
```

### Add an environment variable to your .env file

To add an environment variable to your `.env` file, edit it and add a new name=value pair on a new line.

## Some rules

* Environment variable keys should use only alphanumeric characters, and the underscore character (_) to ensure that they are accessible from all programming languages. Environment variable keys should not include the hyphen character.
* Environment variable keys should not begin with a double underscore (__).
* An environment variable’s key should not begin with QOVERY_ unless it is set by the Qovery platform itself.
