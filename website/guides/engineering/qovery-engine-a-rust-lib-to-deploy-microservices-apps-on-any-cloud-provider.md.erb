---
$schema: "/.meta/.schemas/guides.json"
title: Qovery Engine - A Rust lib to deploy microservices apps on any Cloud provider
description: In this article we will take a look at how Qovery Engine works
author_github: https://github.com/evoxmusic
tags: ["type: engineering", "language: rust"]
hide_pagination: true
---
import Assumptions from '@site/src/components/Assumptions';
import Alert from '@site/src/components/Alert';

Last week we open-sourced the [Qovery deployment engine][urls.qovery_engine] written in Rust after months of hard work with my team of six. This lib is still under development, but more than 600 developers and dozens of successful companies use it through [Qovery][urls.qovery] Community and Business.

In this article I want to show you how the Qovery Engine works, and how it helps us to build the future of the Cloud.

## How does Qovery Engine works?

Qovery Engine is based on a plugin system. The goal is to abstract the use of different products to deploy a complete application.
From the bootstraping of the infrastructure, to the application building, domain provisioning, to the final app deployment... Qovery Engine got you back.

<img src="/img/policy-complete-flow.png"/>

### Demo
Here is a quick video of the Qovery Engine used through the [Qovery CLI][docs.using-qovery.interface.cli]. ([Give a try][guides.getting-started.deploy-your-first-application]).

[![asciicast](https://asciinema.org/a/370072.svg)](https://asciinema.org/a/370072)

## Usage

Qovery Engine is a Rust library that can be used in your app. It requires a few binaries:

- `aws-iam-authenticator`: to manage AWS resources.
- `terraform`: to deploy and manage the infrastructure.
- `docker`: to build and push final container images.
- `helm`: to deploy and manage apps on Kubernetes.
- `kubectl`: to get some infos from Kubernetes.

<Alert type="info">

To use Qovery Engine you need to have at least an AWS, and a Cloudflare account.

</Alert>

### Infrastructure bootstrapping
Here are some snippets to

### Microservices deployment

Here I deploy 2 NodeJS applications with a PostgreSQL database on AWS.

<Tabs
  centered={false}
  className={"square"}
  defaultValue={"main.rs"}
  select={false}
  size={null}
  values={[{"group":"Files","label":"main.rs","value":"main.rs"},{"group":"Files","label":"applications.rs","value":"applications.rs"},{"group":"Files","label":"databases.rs","value":"databases.rs"}]}>

<TabItem value="main.rs">

```rust title="main.rs"
fn main() {
  //...
  let engine = Engine::new(
      context, // parameters
      local_docker, // initialize Docker as a Build Platform
      ecr, // initialize Elastic Container Registry
      aws, // initialize AWS account
      cloudflare, // initialize Cloudflare as DNS Nameservers
  );

  let session = match engine.session().unwrap();

  let app_1: Application = app_1();
  let app_2: Application = app_2();
  let postgresql_db: PostgreSQL = postgresql_database();

  let mut environment = Environment {
    ...
    applications: vec![app_1, app_2],
    databases: vec![postgresql_db],
    ...
  };

  // open a transaction, if app deployment failed, then rollback on a consistent state.
  let mut tx = session.transaction();

  // request to deploy the "environment"
  tx.deploy_environment(&EnvironmentAction::Environment(environment));

  // deploy the 2 apps and the database
  tx.commit();
}
```

</TabItem>

<TabItem value="applications.rs">

```rust title="applications.rs"
pub fn app_1() {

}
```

</TabItem>

<TabItem value="databases.rs">

```rust title="databases.rs"
let x = "toto";
```

</TabItem>

</Tabs>


### Multi environments
TODO

### Rollback
TODO

## Behind the scene

### Terraform
TODO

### Helm
TODO

### Kubernetes
TODO

### Docker
TODO

## Plugins

<!-- Create a table here -->

### Cloud provider
TODO

### Kubernetes
TODO

### Build platform
TODO

### Container registry
TODO

### DNS provider
TODO

### Monitoring provider
TODO

## Interfaces

### CLI
TODO

### Web
TODO

## What's next?
TODO


<!-- CTA give a star to qovery engine -->

<Jump to="/guides/engineering/">Engineering</Jump>
